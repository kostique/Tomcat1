package com.coreteka.servlets;

import com.coreteka.entities.User;
import com.coreteka.exceptions.UserAlreadyExistsException;
import com.coreteka.exceptions.UserNotFoundException;
import com.coreteka.service.UserService;
import com.coreteka.service.impl.UserServiceImpl;
import com.google.gson.Gson;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;


public class UserServlet extends HttpServlet {

    private Gson gson = new Gson();
    private static final Logger logger = LogManager.getLogger(UserServlet.class);
    private UserService userService = new UserServiceImpl();

    //GET/Tomcat1/users
    //GET/Tomcat1/users/username
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String pathInfo = request.getPathInfo();
        if(pathInfo == null || pathInfo.equals("/")){
            List<User> allUsers = userService.getAll();
            sendAsJson(response, allUsers);
            return;
        }
        String[] splits = pathInfo.split("/");
        if (!isPathInfoLengthValid(splits)){
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        String username = splits[1];

        User user;
        try {
            user = userService.getByUsername(username);
            sendAsJson(response, user);
        } catch (UserNotFoundException unfe){
            logger.error("User could not be found.");
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
        }
    }

    //POST/Tomcat1/users
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String pathInfo = request.getPathInfo();
        if(pathInfo == null || pathInfo.equals("/")){
            User requestUser = getUserFromRequest(request);
            try {
                User createdUser = userService.create(requestUser);
                sendAsJson(response, createdUser);
            } catch (UserAlreadyExistsException uaee){
                logger.error("User already exists");
                response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            }
        }
        else {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
        }
    }

    //PUT/Tomcat1/users/username
    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String username = getUsernameFromPath(request);
        if(username == null){
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        User existingUser;
        try {
           existingUser = userService.getByUsername(username);
        } catch (UserNotFoundException unfe){
            logger.error("User could not be found.");
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        User requestUser = getUserFromRequest(request);
        requestUser.setId(existingUser.getId());
        userService.update(requestUser);
        sendAsJson(response, requestUser);

    }

    //DELETE/Tomcat1/users/username
    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String username = getUsernameFromPath(request);
        if(username == null){
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        try {
            userService.delete(username);
        } catch (UserNotFoundException unfe){
            logger.error("User could not be found");
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        response.setContentType("text/html; charset=UTF-8");
        response.setStatus(200);

        PrintWriter out = response.getWriter();
        out.print("User deleted successfully");
        out.flush();

    }

    private void sendAsJson(HttpServletResponse response, Object obj) throws IOException {
        response.setContentType("application/json");
        String res = gson.toJson(obj);
        PrintWriter out = response.getWriter();
        out.print(res);
        out.flush();
    }

    private String getUsernameFromPath(HttpServletRequest request){
        String pathInfo = request.getPathInfo();
        if(isPathInfoEqualNullOrSlash(pathInfo)){
            return null;
        }

        String[] splits = pathInfo.split("/");
        if(isPathInfoLengthValid(splits)){
            return null;
        }
        return splits[1];
    }

    private boolean isPathInfoLengthValid(String[] splits) {
        if (splits.length != 2) {
            return false;
        }
        return true;
    }

    private boolean isPathInfoEqualNullOrSlash(String pathInfo) {
        if (pathInfo == null || pathInfo.equals("/")) {
            return true;
        }
        return false;
    }

    private User getUserFromRequest(HttpServletRequest request) throws IOException {
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = request.getReader();
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        String data = builder.toString();
        return gson.fromJson(data, User.class);
    }
}